generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  password           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  accounts           Account[]
  backgroundJobs     BackgroundJob[]
  budgets            Budget[]
  goals              FinancialGoal[]
  financialProfile   FinancialProfile?
  financialSummaries FinancialSummary[]
  notifications      Notification[]
  profile            Profile?
  transactions       Transaction[]
}

model Account {
  id           String        @id @default(cuid())
  userId       String
  name         String
  type         String
  balance      Float
  currency     String        @default("USD")
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  accountId   String
  amount      Float
  description String
  category    String
  date        DateTime
  type        String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id        String   @id @default(cuid())
  userId    String
  name      String
  amount    Float
  category  String
  period    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FinancialGoal {
  id                          String    @id @default(cuid())
  userId                      String
  title                       String
  description                 String?
  goalType                    String
  targetAmount                Float
  currentAmount               Float
  targetDate                  DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  source                      String
  acceptedByUser              Boolean
  status                      String
  monthlyContributionEstimate Float
  priority                    Int?
  confidenceScore             Float?
  tags                        String[]
  user                        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String    @id @default(cuid())
  userId    String    @unique
  phone     String?
  dob       DateTime?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FinancialProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  yearlyIncome   String?
  occupation     String?
  incomeSource   String?
  taxBracket     String?
  savingsGoal    String?
  financialGoals String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  relatedTo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BackgroundJob {
  id        String   @id @default(cuid())
  userId    String
  type      String
  status    String
  progress  Int      @default(0)
  result    Json?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FinancialSummary {
  id        String   @id @default(uuid())
  userId    String
  year      Int
  month     Int
  category  String
  type      String
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month, category, type])
  @@index([userId, year, month])
  @@index([userId, category, type])
}
